function queryString(n) { var t, i; if (n = n.toLowerCase(), !queryString.parsed) { queryString.parsed = Object.fromQueryString(window.location.search); for (t in queryString.parsed) queryString.parsed.hasOwnProperty(t) && (queryString.parsed[t.toLowerCase()] = queryString.parsed[t]) } return i = queryString.parsed[n], i || (i = ""), i } function getPasswordResetQueryString() { var n = "", t = ""; return viewModel.practiceLocationId() && (n = viewModel.practiceLocationId()), viewModel.loginName() && (t = viewModel.loginName()), "?officeNumber=" + n + "&userName=" + t } function validateNewPassword() { $.validator.addMethod("characters", function (n, t) { return t.value.length < 8 ? !1 : !0 }); $.validator.addMethod("notEqual", function (n, t, i) { return this.optional(t) || n !== $(i).val() }, !1); $("#newPasswordForm").alslValidate({ onfocusout: !1, onclick: !1, rules: { oldPassword: { required: !0 }, newPassword: { required: !0, characters: !0, notEqual: "#oldPassword" }, newConfirmPassword: { required: !0, equalTo: "#newPassword" } }, messages: { oldPassword: { required: "Enter your old Password." }, newPassword: { required: "Enter a New Password.", characters: "New password must be 8-15 characters.", notEqual: "The password you entered has already been used. Enter a new password that is different from your last 5 passwords." }, newConfirmPassword: { required: "Enter a Confirm Password.", equalTo: "New Password and Confirm Password do not match." } } }) } function getLockoutContacts(n, t) { var i = "", r; return i = t ? '<a id="passwordReset" href="Login/VerifyUser' + getPasswordResetQueryString() + '">Click here<\/a> to reset your password, or contact ' : "Contact ", n.Note && (i += n.Note.indexOf(" or ") > 0 ? "one of your Administrators, " : "your Administrator, ", i += " {admins}"), i += " or Eyefinity Customer Care at 1.800.942.5353 if you need assistance.", r = n.Note || "", i.assign({ admins: r }) } function loadCMSMessaging() { document.stopLoader(); client.action("GetCmsContent").post().done(function (n) { var t = $("<div/>").append($.parseHTML(n)), i = $(t).find("#title").html(), r = $(t).find("#text").html(), u = i.length > 0 || r.length > 0; u === !0 && ($("#cmsMessaging #title").html(i), $("#cmsMessaging #text").html(r), $("#cmsMessaging").removeClass("hidden"), $(window).resize()) }) } var ViewModel = ViewModelBase.extend({ mappedProperties: ["PracticeLocationId", "Action", "LoginName", "OldPassword", "Password", "ConfirmPassword", "RememberMyUsername", "RememberOfficeNumber", "EmergencyAccess", "RedirectUrl", "NumberOfAttempts", "ZipCode", "OfficePhoneNumber", "SecurityQuestion", "SecurityAnswer", "NumberOfPasswordResetAttempts"], constructor: function () { ViewModel.__super__.constructor.call(this); this.emergencyAccess(!1); this.rememberOfficeNumber(!1); this.rememberMyUsername(!1); this.numberOfAttempts(0); this.numberOfPasswordResetAttempts(0) }, toModel: function () { var n = ViewModel.__super__.toModel.apply(this, arguments); return n.Action = "Verify", n } }), client = new ApiClient(window.config.baseUrl, "Login"), viewModel = new ViewModel, container, top, middle, bottom, showResetPassword = function (n) { $("#password").val(""); $("#oldPassword, #newPassword, #newConfirmPassword").val(""); $("#oldPassword, #newPassword, #newConfirmPassword").addClass("requiredField"); $("#oldPassword").clearField(); $("#newPassword").clearField(); $("#newConfirmPassword").clearField(); $("#resetYourPassword").clearField(); n.PasswordPolicy === "" && ($("#pwdPolicyLabel")[0].innerHTML = ""); $("#pwdPolicy")[0].innerHTML = n.PasswordPolicy; $("#newPasswordModal").modal({ keyboard: !1, backdrop: !1, show: !0 }); $("#oldPassword").focus() }, saveRemembers = function (n) { try { window.sessionStorage.setItem(window.storageKeys.officeId, n); viewModel.rememberMyUsername() ? window.localStorage.setItem(window.storageKeys.loginName, viewModel.loginName()) : window.localStorage.removeItem(window.storageKeys.loginName); viewModel.rememberOfficeNumber() ? window.localStorage.setItem(window.storageKeys.practiceLocationId, viewModel.practiceLocationId()) : window.localStorage.removeItem(window.storageKeys.practiceLocationId) } catch (t) { if (t.code === DOMException.QUOTA_EXCEEDED_ERR) sessionStorage.length ? (sessionStorage.removeItem("window.storageKeys.officeId"), sessionStorage.setItem(window.storageKeys.officeId, n)) : alert("Your browser is set to Private Browsing, which may cause some settings in Eyefinity Practice Management to not work properly. To avoid these errors, change your browser settings to disable Private Browsing."); else throw t; } }, loadRemembers = function () { var n = window.localStorage.getItem(window.storageKeys.loginName), t = window.localStorage.getItem(window.storageKeys.practiceLocationId); n && (viewModel.loginName(n), viewModel.rememberMyUsername(!0)); t && (viewModel.practiceLocationId(t), viewModel.rememberOfficeNumber(!0)) }, getRedirectUrl = function () { return queryString("ReturnUrl") || window.config.baseUrl }; $("#btnSave").click(function (n) { if (n.preventDefault(), $("#newPasswordForm").valid()) { var t = viewModel.toModel(); t.Action = "Reset"; t.PasswordPolicy = $("#pwdPolicy")[0].innerHTML; t.OldPassword = $("#oldPassword").val(); t.Password = $("#newPassword").val(); t.ConfirmPassword = $("#newConfirmPassword").val(); client.action("ProcessPassword").post(t).done(function (n) { switch (n.PasswordCheckResult) { case "MeetsPolicy": $(document).showSystemSuccess("New password successfully saved."); $("#newPasswordModal").modal("hide"); $("#password").focus(); break; case "FailsPolicy": $("#pwdPolicyLabel")[0].innerHTML === "" ? $("#resetYourPassword").showFieldMessage(msgType.ERROR, ["All passwords must be 8-15 characters."], !0) : $("#resetYourPassword").showFieldMessage(msgType.ERROR, ["All passwords must be 8-15 characters, contain at least one numeric character, and abide by your company’s password policy. Your new password must be different from your last 5 passwords."], !0); break; case "NoMatch": $("#resetYourPassword").showFieldMessage(msgType.ERROR, ["Incorrect password. Please try again."], !0) } }) } }); $("#passwordReset").click(function () { window.location.href = window.config.baseUrl + $(this).attr("data-url") + getPasswordResetQueryString() }); $(function () { client.action("IsAutomationOn").get({ isBrowserIe: navigator.appVersion.indexOf("MSIE") !== -1 ? !0 : !1 }).done(function (n) { var i, t; if (n === !1) $("#container").addClass("hidden"), i = window.config.baseUrl + "Login/Compatibility", window.location.href = i; else { $("#container").removeClass("hidden"); ko.applyBindings(viewModel); loadRemembers(); viewModel.practiceLocationId() ? viewModel.loginName() ? $("#password").focus() : $("#loginName").focus() : $("#practiceLocationId").focus(); loadCMSMessaging(); validateNewPassword(); $("form").alslValidate({ ignore: ":hidden", rules: { practiceLocationId: { required: !0 }, loginName: { required: !0 }, password: { required: !0 }, zipCode: { required: !0 }, officePhoneNumber: { required: !0 }, securityAnswer: { required: !0 }, confirmPassword: { required: !0, equalTo: "#password" } }, messages: { practiceLocationId: { required: "Enter an Office Identifier." }, loginName: { required: "Enter a Login Name." }, password: { required: "Enter a Password." }, zipCode: { required: "Enter Office ZipCode." }, officePhoneNumber: { required: "Enter Office Phone Number." }, securityAnswer: { required: "Enter your security answer." }, confirmPassword: { required: "Confirm Password.", equalTo: "Password and confirmation do not match." } }, submitHandler: function () { var n; $(".summaryMessages").clearMsgBlock(); viewModel.password($("#password").val()); viewModel.loginName($("#loginName").val()); viewModel.numberOfAttempts(viewModel.numberOfAttempts() + 1); viewModel.numberOfPasswordResetAttempts(viewModel.numberOfPasswordResetAttempts() + 1); viewModel.redirectUrl(getRedirectUrl()); client.action("ProcessPassword").post(viewModel.toModel()).done(function (t) { var r, i, u; t.PasswordCheckResult === null && ($(document).showSummaryMessage(msgType.ERROR, ["The Office Identifier, Login Name, and/or Password is incorrect. Enter correct information to log in. "], undefined, "Incorrect login information"), $("#password").focus()); switch (t.PasswordCheckResult) { case "Verified": case "MeetsPolicy": window.localStorage.setItem("IsEcrOnPrem", t.IsOnPremEcrVault); saveRemembers(t.OfficeId); location.href = t.RedirectUrl; break; case "ChangePassword": showResetPassword(t); break; case "Inactive": n = ["<br/>You are either not authorized or your role is not active to perform this operation. Please log in with authorized credentials."]; $(document).showSummaryMessage(msgType.ERROR, n); break; case "IsLockedOut": r = 5 - t.NumberOfPasswordResetAttempts; r > 0 ? $(document).showSummaryMessage(msgType.ERROR, ["You have exceeded the maximum number of login attempts and your account is locked. " + getLockoutContacts(t, !0)]) : $(document).showSummaryMessage(msgType.ERROR, ["You have exceeded the maximum number of reset password/login attempts and your account is locked. " + getLockoutContacts(t, !1)]); break; case "NoMatch": n = ["The Office Identifier, Login Name, and/or Password is incorrect. Enter correct information to log in. "]; t.NumberOfAttempts > 2 && (i = 5 - t.NumberOfAttempts, u = 5 - t.NumberOfPasswordResetAttempts, i > 0 ? n.push("<br/>Your account will be locked after {left} more failed login attempts. ".assign({ left: i }) + getLockoutContacts(t, !0)) : n = u > 0 ? ["You have exceeded the maximum number of login attempts and your account is locked. " + getLockoutContacts(t, !0)] : ["You have exceeded the maximum number of reset password/login attempts and your account is locked. " + getLockoutContacts(t, !1)]); $(document).showSummaryMessage(msgType.ERROR, n, undefined, "Incorrect login information"); $("#password").focus(); break; case "FailsPolicy": $(document).showSummaryMessage(msgType.ERROR, ["Reset your password. All passwords must be 8-15 characters, contain at least one numeric character, and abide by your company’s password policy. Your new password must be different from your last 5 passwords."]) } $(window).resize() }).fail(function () { $(document).showSummaryMessage(msgType.ERROR, ["The Office Identifier, Login Name, and/or Password is incorrect. Enter correct information to log in. "]); $("#password").focus() }); $(window).resize() } }); container = $("#container"); top = $("#top"); middle = $("#middle"); bottom = $("#containerbottom"); t = $("#resetPasswordLink"); $(window).resize(function () { var r = $("#lg").is(":visible"); $(document.body).toggleClass("lg", r); var i = $(window).height(), u = Math.min(r ? 799 : i, i), f = container.outerHeight(), n = Math.floor((u - f) / 2); n += parseInt(middle.css("paddingTop"), 10); t && t.css({ paddingTop: n }); middle.css({ paddingTop: n, paddingBottom: t ? 0 : n }); container.css({ marginTop: Math.max(Math.floor(i - container.outerHeight()) / 2, 0) }) }); $(document).on("focusout", function () { $(window).resize() }); $(window).resize(); $("#btnLogin").click(function () { $("form").valid(); $(window).resize() }); $(".tt").popover({ container: "body", html: !0 }); $("body").on("click", ".popover.popover.fade.in", function () { $(".popover.fade.in").removeClass("in").addClass("out") }) } }) });
//# sourceMappingURL=Login.min.js.map
