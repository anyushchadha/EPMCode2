function submitHandler(n, t) { t.preventDefault(); $(".btn:visible").click() } function goToLoginPage() { window.location.href = window.config.baseUrl + "Login" } function validateVerifyUserForm() { $("#officePhoneNumber").mask("?(999) 999-9999"); $("form").alslValidate({ ignore: ":hidden", rules: { practiceLocationId: { required: !0 }, loginName: { required: !0 }, zipCode: { required: !0, Regex: regex.ZIP }, officePhoneNumber: { required: !0, Regex: regex.PHONE }, securityAnswer: { required: !0 }, password: { required: !0 }, confirmPassword: { required: !0, equalTo: "#password" } }, messages: { practiceLocationId: { required: "Enter an Office Identifier." }, loginName: { required: "Enter a Login Name." }, zipCode: { required: "Enter the Office Zip Code.", Regex: "Enter a valid ZIP code." }, officePhoneNumber: { required: "Enter the Office Phone Number.", Regex: "Enter a valid Phone Number." }, securityAnswer: { required: "Enter your security answer." }, password: { required: "Enter a Password." }, confirmPassword: { required: "Confirm Password.", equalTo: "Password and confirmation do not match." } }, submitHandler: submitHandler }) } function getLockoutContacts(n) { var t = "Contact ", i; return n.Note && (t += (n.Note.indexOf(" or ") ? "one of your Administrators, " : "your Administrator, ") + " {admins}"), t += " or Eyefinity Customer Care at 1.800.942.5353 if you need assistance.", i = n.Note ? n.Note : "", t.assign({ admins: i }) } function doneProcessing(n) { n.PasswordCheckResult === null && $(document).showSummaryMessage(msgType.ERROR, ["The Office Identifier, Login Name, ZipCode and/or Office Phone Number is incorrect. Please enter correct information in order to proceed further."]); var t, i = 5 - n.NumberOfPasswordResetAttempts; switch (n.PasswordCheckResult) { case "NoSecurityQuestion": $("#verifyua").css("display", "none"); $("p#admins").text(getLockoutContacts(n)); $("#login").hide(); $("#noquestion").css("display", "block"); break; case "MaxFailedPasswordAnswerAttemptReached": $(document).showSummaryMessage(msgType.ERROR, ["You have exceeded the maximum number of login attempts and your account is locked." + getLockoutContacts(n)]); break; case "EmployeeInactive": t = ["<br/>You are either not authorized or your role is not active to perform this operation." + getLockoutContacts(n)]; $(document).showSummaryMessage(msgType.ERROR, t); break; case "UserNotFound": t = ["<br/>You are either not authorized or your role is not active to perform this operation."]; $(document).showSummaryMessage(msgType.ERROR, t); break; case "ZipCodeNotValid": case "PhoneNumberNotValid": case "CompanyDoesNotExist": t = ["The Office Identifier, Login Name, ZipCode and/or Office Phone Number is incorrect. Please enter correct information in order to proceed further."]; n.NumberOfPasswordResetAttempts > 2 && (i > 0 ? t.push("<br/>Your account will be locked after {left} more failed attempts. ".assign({ left: i }) + getLockoutContacts(n)) : t = ["You have exceeded the maximum number of attempts and your account is locked. " + getLockoutContacts(n)]); $(document).showSummaryMessage(msgType.ERROR, t, undefined, "Incorrect login information"); break; case "SecurityAnswerNotvalid": t = ["The Security answer is incorrect. Please enter correct information in order to proceed further."]; n.NumberOfPasswordResetAttempts > 2 && (i > 0 ? t.push("<br/>Your account will be locked after {left} more failed attempts. ".assign({ left: i }) + getLockoutContacts(n)) : t = ["You have exceeded the maximum number of attempts and your account is locked. " + getLockoutContacts(n)]); $(document).showSummaryMessage(msgType.ERROR, t, undefined, "Incorrect login information"); break; case "VerifiedPracticeInfoSuccess": $("#verifyua").css("display", "none"); $("#lblsecurityQuestion").text(n.SecurityQuestion); $("#verifysq").css("display", "block"); break; case "UserIdentityVerifiedSuccessfully": $("#verifysq").css("display", "none"); $("#pwdPolicy").html(n.PasswordPolicy); $("#resetpwd").css("display", "block"); break; case "MeetsPolicy": $(document).showSystemSuccess("New password successfully saved."); setTimeout(function () { goToLoginPage() }, 500); break; case "FailsPolicy": $("#pwdPolicyLabel")[0].innerHTML === "" ? $(document).showSummaryMessage(msgType.ERROR, ["All passwords must be 8-15 characters."], !0) : $(document).showSummaryMessage(msgType.ERROR, ["All passwords must be 8-15 characters, contain at least one numeric character, and abide by your company’s password policy. Your new password must be different from your last 5 passwords."], !0) } $(window).resize() } function failProcessing(n) { n.statusText === "abort" ? n.handled = !0 : n.status === 500 && ($(document).showSummaryMessage(msgType.SERVER_ERROR, "An error occurred while performing Reset password operation.", !0), window.scrollTo(0, 0)) } function queryString(n) { var t, i; if (n = n.toLowerCase(), !queryString.parsed) { queryString.parsed = Object.fromQueryString(window.location.search); for (t in queryString.parsed) queryString.parsed.hasOwnProperty(t) && (queryString.parsed[t.toLowerCase()] = queryString.parsed[t]) } return i = queryString.parsed[n], i || (i = ""), i } var ViewModel = ViewModelBase.extend({ mappedProperties: ["PracticeLocationId", "Action", "LoginName", "ZipCode", "OfficePhoneNumber", "SecurityQuestion", "SecurityAnswer", "RedirectUrl", "NumberOfPasswordResetAttempts", "Password", "ConfirmPassword"], constructor: function () { ViewModel.__super__.constructor.call(this); this.numberOfPasswordResetAttempts(0); this.action("StepOne") }, toModel: function () { var n = ViewModel.__super__.toModel.apply(this, arguments); return n.OfficePhoneNumber = (n.OfficePhoneNumber || "").replace("/[^0-9]/g", ""), n } }), client = new ApiClient(window.config.baseUrl, "Login"), viewModel = new ViewModel, container, top, middle, bottom, getViewModel = function () { var n = viewModel.toModel(), t = $("#officePhoneNumber").val(); return n.OfficePhoneNumber = t.replace(/[^0-9]/g, ""), n }, getPracticeLocationId, getLoginName; $("#btnReturnLogin").click(function (n) { n.preventDefault(); goToLoginPage() }); $("#btnStepOne").click(function (n) { ($(".summaryMessages").clearMsgBlock(), n.preventDefault(), $("form").valid()) && (viewModel.action("StepOne"), client.action("ResetPassword").post(getViewModel()).done(function (n) { doneProcessing(n); viewModel.action("StepTwo"); $("#securityAnswer").focus() }).fail(function (n) { failProcessing(n) }), $(window).resize()) }); $("#btnStepTwo").click(function (n) { ($(".summaryMessages").clearMsgBlock(), n.preventDefault(), $("form").valid()) && (viewModel.action("StepTwo"), client.action("ResetPassword").post(getViewModel()).done(function (n) { doneProcessing(n); viewModel.action("StepThree"); $("#password").focus() }).fail(function (n) { failProcessing(n) }), $(window).resize()) }); $("#btnStepThree").click(function (n) { ($(".summaryMessages").clearMsgBlock(), n.preventDefault(), $("form").valid()) && (viewModel.action("StepThree"), client.action("ResetPassword").post(getViewModel()).done(function (n) { doneProcessing(n) }).fail(function (n) { failProcessing(n) }), $(window).resize()) }); getPracticeLocationId = function () { return queryString("officeNumber") }; getLoginName = function () { return queryString("userName") }; $("#login").click(function (n) { n.preventDefault(); goToLoginPage() }); $(document).ready(function () { $("#container").removeClass("hidden"); viewModel.loginName(getLoginName()); viewModel.practiceLocationId(getPracticeLocationId()); viewModel.practiceLocationId() ? $("#loginName").focus() : $("#practiceLocationId").focus(); viewModel.loginName() && $("#zipCode").focus(); ko.applyBindings(viewModel); validateVerifyUserForm(); container = $("#container"); top = $("#top"); middle = $("#middle"); bottom = $("#containerbottom"); var n = $("#loginLink"); $(window).resize(function () { var r = $("#lg").is(":visible"); $(document.body).toggleClass("lg", r); var i = $(window).height(), u = Math.min(r ? 799 : i, i), f = container.outerHeight(), t = Math.floor((u - f) / 2); t += parseInt(middle.css("paddingTop"), 10); n && n.css({ paddingTop: t }); middle.css({ paddingTop: t, paddingBottom: n ? 0 : t }); container.css({ marginTop: Math.max(Math.floor(i - container.outerHeight()) / 2, 0) }) }); $(document).on("focusout", function () { $(window).resize() }); $(window).resize(); $(".tt").popover({ container: "body", html: !0 }); $("body").on("click", ".popover.popover.fade.in", function () { $(".popover.fade.in").removeClass("in").addClass("out") }) });
//# sourceMappingURL=resetpwd.min.js.map
